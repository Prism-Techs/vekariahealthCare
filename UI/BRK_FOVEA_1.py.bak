import imp
import tkinter as tk
from tkinter import  IntVar, ttk       
from globalvar import pageDisctonary
from globalvar import globaladc
from globalvar import currentPatientInfo
import PerodicThread
import RPi.GPIO as GPIO
import time

switch = 20
Font = ("Arial",15)
Font1 = ("Arial",15)
Font2 = ("Arial",20)

defaultdepth = 1
maxdepth_1 = 19
maxdepth_2 = 2.00
intervel=0.13
resume_spot_x = 450
resume_spot_y = 240

class BrkFovea_1 :
    def __init__(self, frame):        
        self.worker_brk_f = PerodicThread.PeriodicThread(intervel,self)
        self.value = 0
        self.locate =0
        self.inc_dec_2 = False
        self.skip_event =True
        self.threadCreated =False        

        def depthincrement_callback():
           # self.trialList_mid.listvariable =  self.depth_increment.get(1)
           globaladc.get_print('increment call back') 

        self.frame = frame
        self.trialList_left = tk.Listbox (frame,font=Font1,width=5, bg='white',justify='center')
        self.trialList_mid = tk.Listbox (frame,font=Font1,width=5, bg='white',justify='center')
        self.trialList_right = tk.Listbox (frame,font=Font1,width=5, bg='white',justify='center')
        self.frame = frame
        self.depthVal = tk.IntVar()
        self.Val_l = tk.IntVar()
        self.Val_r = tk.IntVar()
        self.depthVal_2 = tk.DoubleVar()        
        self.depthVal.set(defaultdepth)  
        self.threadCreated =False
        self.save_enable_text = tk.Label (frame,font=Font1,bg='white')
        self.process = 0 
            # with open('textfile.txt','a') as s:
            #   for i in range(self.listView.model().rowCount()):
            #    text = self.listView.item(i).text()
            # # globaladc.get_print(i, text)
            # s.write(text) 
            
        def UpButtonClicked():
            globaladc.buzzer_1()
            if self.process == 0 :
                y = self.depthVal.get()
                if(y < maxdepth_1):
                    x = y+1
                    self.depthVal.set(x)
                    globaladc.blue_led_Volt(x) 
                if self.depthVal.get() == 19:
                    self.save_enable_text.config(text='MPOD 1.0+\nSelect SAVE')
                    self.save_enable_text.place (x=100, y=300)
                    self.saveButton.place (x=100, y=380)
                    self.resumeButton.place_forget()
                else :
                    self.save_enable_text.place_forget()
                    self.saveButton.place_forget()
                    self.resumeButton.place(x=resume_spot_x,y=resume_spot_y)
            elif self.process == 1 :
                cff_fovea_frq = globaladc.get_cff_fovea_frq()
                if(self.depthVal_2.get() < maxdepth_2):
                    x = round((self.depthVal_2.get()+0.5),1)
                    globaladc.get_print('x=',x)
                    self.depthVal_2.set(x)                    
                    globaladc.put_cff_fovea_frq(round(cff_fovea_frq+0.5,1))


        self.UPButton = tk.Button (self.frame,
                                  text="^", bg="#a0f291", font=12,  
                                  width=10, command=UpButtonClicked)

        def DownButtonClicked():
            globaladc.buzzer_1()
            if self.process == 0 :
                if(self.depthVal.get() > 0):
                    x= self.depthVal.get()-1
                    self.depthVal.set(x)
                    globaladc.blue_led_Volt(x) 
                if self.depthVal.get() == 0:
                    self.save_enable_text.config(text='NEGLIGIBLE MPOD\nSelect SAVE')
                    self.save_enable_text.place (x=80, y=300)
                    self.saveButton.place (x=100, y=380)
                    self.resumeButton.place_forget()
                else :
                    self.save_enable_text.place_forget()
                    self.saveButton.place_forget()
                    self.resumeButton.place(x=resume_spot_x,y=resume_spot_y)
            elif self.process == 1 :
                cff_fovea_frq = globaladc.get_cff_fovea_frq()
                y = self.depthVal_2.get()
                if(y > 0):
                    x = round((y-0.5),1)
                    self.depthVal_2.set(x)
                    globaladc.put_cff_fovea_frq(round(cff_fovea_frq-0.5,1))
                    
        self.DownButton = tk.Button (self.frame,
                                  text="v", bg="#a0f291",font=12,  
                                  width=10, command=DownButtonClicked)        
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    def handleuser(self,switch):
        #globaladc.get_print('to be implemented')
        self.patient_switch_desable()
        time.sleep(0.2)
        jmp = False
        if self.process_chainge < 2:
            mod_ch = True
            if not self.skip_event :
                self.skip_event = True
                time.sleep(0.2)                
                self.locate = 0
                if not self.rptloop :                        
                    if self.inc_dec_1 :
                        self.inc_dec_1 = False                            
                    else :
                        self.inc_dec_1 = True  
                    if self.inc_dec_2 :
                        self.process_chainge = self.process_chainge + 1                            
                        val_l = self.trialList_left.get(self.locate)
                        val_r = self.trialList_right.get(self.locate)
                        str_data = 'r and l val'+str(val_l)+str(val_r)
                        globaladc.get_print(str_data)
                        value_m = int(((val_l+ val_r)/2)) 
                        self.trialList_mid.delete(self.locate)
                        self.trialList_mid.insert(self.locate,value_m)                         
                        if self.process_chainge == 2:
                            self.patentActionflabel_3.place_forget()
                            self.DownButton.place_forget()
                            self.UPButton.place_forget()
                            self.null_box.place_forget()
                            self.DepthVal.place_forget()
                            globaladc.brk_fovea_3_screen_initialize()                             
                            leng = self.trialList_right.size()
                            self.trialList_right.delete(0,leng-1)
                            leng = self.trialList_left.size()
                            self.trialList_left.delete(0,leng-1)
                            leng = self.trialList_mid.size()
                            #globaladc.buzzer_3()
                        self.inc_dec_2 = False                             
            else : 
                self.skip_event = False
                self.patentActionflabel_2.place_forget()
                self.rptloop = False
      
      
      
        else :
#             if mod_ch:
#                 globaladc.buzzer_3()
#                 mod_ch = False
            if not self.skip_event :
                self.skip_event = True
                time.sleep(0.2)
#                 globaladc.buzzer_3()
                if not self.rptloop :                            
                    if self.inc_dec_1 :
                        self.inc_dec_1 = False
                    else :
                        self.inc_dec_1 = True                            
                    if self.inc_dec_2 :
                        val_l = self.trialList_left.get(self.locate)
                        val_r = self.trialList_right.get(self.locate)
                        str_data = 'r and l val'+str(val_l)+str(val_r)
                        globaladc.get_print(str_data)                        
                        value_m = int(((val_l+ val_r)/2)) 
                        self.locate = self.locate + 1
                        self.trialList_mid.insert(self.locate,value_m)    
                    if self.locate == 4 :                            
                        #self.userButton.place_forget()
                        f_val = globaladc.get_cff_fovea_frq()
                        currentPatientInfo.SetCFF_F(f_val)
                        globaladc.put_brk_fovea_frq(self.trialList_mid.get(self.locate))
                        f_mpod=globaladc.get_f_mpod()
                        currentPatientInfo.SetF_mpod(f_mpod)
                        globaladc.put_save_no(1)
                        log_data = "F_mpod-"+str(f_mpod)
                        currentPatientInfo.log_update(log_data)
                        globaladc.black_screen_initialize()
                        time.sleep(2)      
                        # home run                      
                        globaladc.get_print('call save butten to save MPOD')
                        globaladc.get_print('jump to cff para fovea')
                        pageDisctonary['BrkFovea_1'].hide()
                        pageDisctonary['CffParaFovea'].show()
                        globaladc.put_brk_fovea_frq(self.trialList_mid.get(self.locate + 1))
                        jmp = True
                        globaladc.buzzer_3()                        
                        self.patient_switch_desable()
            else : 
                #globaladc.buzzer_1()
                self.skip_event = False
                self.patentActionflabel_2.place_forget()
                self.rptloop = False  
        self.value = self.trialList_mid.get(self.locate)
        if not jmp:
        	self.patient_switch_enable()
            if self.skip_event:
                time.sleep(0.5) 
                globaladc.buzzer_3()
            
        
    def patient_switch_enable(self) :
        globaladc.get_print('patient_switch_enable')
        GPIO.setwarnings(False) # Ignore warning for now
        GPIO.setmode(GPIO.BCM) # Use physical pin numbering
        GPIO.setup(switch, GPIO.IN, pull_up_down=GPIO.PUD_UP)
        GPIO.add_event_detect(switch,GPIO.RISING,callback=self.handleuser) #CffFovea

    def patient_switch_desable(self) :
        globaladc.get_print('patient_switch_desable')
        GPIO.remove_event_detect(switch)
    
    def handleResume(self):
        globaladc.buzzer_3()
        globaladc.get_print('to be implemented')
        globaladc.brk_fovea_2_screen_initialize() 
        self.DepthVal.config(textvariable=str(self.depthVal_2))
        self.process = 1
        self.process_chainge = 0
        self.resumeButton.place_forget()
        self.patentActionflabel.place_forget()
        self.patentActionflabel_3.place(x=350, y=20)
        self.patentActionflabel_2.place (x=375, y=120)
        #self.userButton.place (x=375, y=440)
        self.patient_switch_enable()       
        
        
    def Load(self):
        self.patentActionflabel = tk.Label (self.frame, text='Increment Null Setting untill \nPatient Reports no fliker,\nPress resume when done',font=Font1,bg='white')
        self.patentActionflabel_3 = tk.Label (self.frame, text='IF Require\nVary NULL settings until\npatient reports on flicker',font=Font1,bg='white')
        self.brk_parf_label = tk.Label(self.frame,text='BRK FOVEA',bg="yellow", font= Font, width=12)  
        self.null_box = tk.Label(self.frame,text='NULL',bg="white", font= Font, width=12)        
        self.patentActionflabel_2 = tk.Label (self.frame, text='Patient\'s side Button \n Begins Traial',font=Font1,bg='white')
        self.trialList_left.place (x=750, y=40)
        self.null_box.place (x=100,y=20)
        self.brk_parf_label.place (x=750,y=10)
        self.trialList_mid.place (x=800, y=40)
        self.trialList_right.place (x=850, y=40)
        self.patentActionflabel.place(x=350, y=20)    
        self.trialList_mid.insert(0,160)
        
        self.inc_dec_1 = False 
        self.inc_dec_2 = False  
        self.process_chainge = 0       

        self.DepthVal = tk.Label(self.frame,textvariable=str(self.depthVal),justify="center", font=Font, bg='white') 
        self.DepthVal.place(x=120,y=130)
        self.UPButton.place (x=110,  y=75)   
        self.DownButton.place (x=110,  y=200)
        self.saveButton.place_forget()
        #saveButton.place (x=100, y=340)
      
        #self.saveButton['state'] = tk.enable
                   

        self.resumeButton = tk.Button(self.frame,
                                 text="Resume",
                                 command=self.handleResume, font=Font, bg='Orange',
                                 width=10)

        self.resumeButton.place(x=resume_spot_x,y=resume_spot_y)


#         self.userButton = tk.Button(self.frame,
#                                  text="USER",
#                                  command=handleuser, font=Font, bg='Orange',
#                                  width=10)       

        
        def onfw():
            pageDisctonary['BrkFovea_1'].hide()
            pageDisctonary['CffParaFovea'].show()
            globaladc.get_print("no fw screen")

        def onbw():
            pageDisctonary['BrkFovea_1'].hide()
            pageDisctonary['MainScreen'].show()



        fwButton = tk.Button (self.frame,
                                 text=">>", font=Font2,
                                 command=onfw, bg='Green',
                                 width=10)
       
        bwButton = tk.Button (self.frame,
                                 text="<<", font=Font2,
                                 command=onbw, bg='Green',
                                 width=10)
  
        # fwButton.place(x=620,y=500)
        # bwButton.place(x=420, y=500)


    def show(self):
        self.frame.place(width=1024,height=600)
        globaladc.brk_fovea_1_screen_initialize() 			# run this while loding brk fovea 1st screen
        self.skip_event = True
        self.threadCreated=False
        self.run_therad()        
        self.process = 0
        self.value = 160
        self.locate =0
        self.inc_dec_2 = False
        self.threadCreated =False
        leng = self.trialList_right.size()
        self.trialList_right.delete(0,leng-1)
        leng = self.trialList_left.size()
        self.trialList_left.delete(0,leng-1)
        leng = self.trialList_mid.size()
        self.trialList_mid.delete(0,leng-1)
        self.trialList_mid.insert(0,160)
        self.DepthVal.config(textvariable=str(self.depthVal))
        self.DepthVal.place(x=120,y=130)
        self.resumeButton.place(x=resume_spot_x,y=resume_spot_y)
        #self.userButton.place_forget()
        self.patentActionflabel.place(x=350, y=20)
        self.patentActionflabel_3.place_forget()
        self.patentActionflabel_2.place_forget ()
        self.UPButton.place(x=110, y=75)   
        self.DownButton.place(x=110, y=200)
        self.inc_dec_1 = False
        self.null_box.place (x=100,y=20)
        self.depthVal.set(1)
  
    def hide(self):
        self.stop_therad()
        self.frame.place_forget()
        
    
    def setRunTestScreen(self, runtestScreen):
        self.runtestScreen = runtestScreen

    def run_therad(self):
        globaladc.get_print("worker_brk_f thread started")
        self.worker_brk_f = PerodicThread.PeriodicThread(intervel,self)
        if not self.worker_brk_f.isStarted :
            self.worker_brk_f.start()  
            self.threadCreated=True         
        
    def stop_therad(self):
        globaladc.get_print("worker_brk_f thread stopped")
        if self.worker_brk_f.isStarted :
            self.worker_brk_f.stop()  
            self.worker_brk_f.kill()
            self.skip_event = True
            self.threadCreated=False

    def periodic_event(self):
        if not self.skip_event :
            if self.inc_dec_1 :
                if self.value == 250 :
                    self.trialList_right.delete(self.locate) 
                    self.rptloop = True
                    #globaladc.buzzer_3()                    
                    self.skip_event = True
                else :                    
                    self.inc_dec_2 = True                 
                    self.value = self.value + 1
                    self.trialList_right.delete(self.locate)                
                    self.trialList_right.insert(self.locate,self.value)                    
            else :
                if self.value == 0 :
                    self.trialList_left.delete(self.locate) 
                    self.rptloop = True
                    #globaladc.buzzer_3()
                    self.trialList_left.delete(self.locate)
                    self.skip_event = True                   
                else : 
                    self.inc_dec_2 = False 
                    self.value = self.value - 1
                    self.trialList_left.delete(self.locate) 
                    self.trialList_left.insert(self.locate,self.value)                
        else :            
            globaladc.get_print('BF')
        globaladc.blue_led_Freq(self.value)


    def getName():
        return "BrkFovea_1"    
